// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MapstedMapUi
import AVFoundation
import CoreData
import Foundation
import MapstedCore
import MapstedMap
import MessageUI
import Swift
import UIKit
import WebKit
@_hasMissingDesignatedInitializers public class MapProfileIcon {
  public static func profileIcon(image: UIKit.UIImage, bgColor: UIKit.UIColor, margin: CoreGraphics.CGFloat) -> UIKit.UIImage?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ShadowButton : UIKit.UIButton {
  public var radiusOfCorner: CoreGraphics.CGFloat
  public var shadowOpacity: Swift.Float
  public var fillColor: UIKit.UIColor
  @objc override dynamic public func layoutSubviews()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum MapState : Swift.Int {
  case eProperty
  case eEntity
  case eDirections
  case eInfo
  case eTag
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol MNMapStateDelegate {
  func mapStateChanged(state: MapstedMapUi.MapState)
}
public protocol MNFeedDelegate {
  func allFeed() -> [[Swift.String : Swift.String]]
}
public protocol MNShareLocationDelegate {
  func shareLocationRequest(duration: Swift.Int)
}
public protocol MNFeedbackDelegate {
  func sendFeedback()
}
@objc @_hasMissingDesignatedInitializers final public class MapstedMapUiViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  #warning("Note: Set isSimulatingRoute to false before release")
  public static let shared: UIKit.UIViewController?
  public static func className() -> Swift.String
  final public func setMapStateDelegate(mapStateDelegate: MapstedMapUi.MNMapStateDelegate)
  final public func setFeedDelegate(feedDelegate: MapstedMapUi.MNFeedDelegate)
  final public func setShareLocationDelegate(shareLocationDelegate: MapstedMapUi.MNShareLocationDelegate)
  final public func setSendFeedbackDelegate(feedDelegate: MapstedMapUi.MNFeedbackDelegate)
  @objc override final public func viewDidLoad()
  @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override final public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  final public func showLoadingSpinner(text: Swift.String)
  final public func hideLoadingSpinner()
  final public func selectAndDrawProperty(propertyId: Swift.Int, callback: @escaping ((Swift.Bool) -> Swift.Void))
  final public func createNewTag(propertyId: Swift.Int)
  final public func zoomToEntity(buildingId: Swift.Int, propertyId: Swift.Int, entityId: Swift.Int)
  final public func zoomTo(location: __ObjC.MNMercator, zoomLevel: Swift.Float)
  final public func zoomTo(level: Swift.Float)
  final public func zoomToUserLocation()
  final public func displayOnMap(buildingId: Swift.Int, propertyId: Swift.Int, entityId: Swift.Int)
  final public func connectWifiBluetoothBannerText() -> Swift.String?
  final public func displayPropertyOnMap(propertyId: Swift.Int)
  final public func displayOnMap(buildingId: Swift.Int, propertyId: Swift.Int, searchEntityId: Swift.Int)
  final public func displayOnMap(buildingId: Swift.Int, propertyId: Swift.Int, searchEntityId: Swift.Int, entityId: Swift.Int)
  final public func routeTo(buildingId: Swift.Int, propertyId: Swift.Int, entityId: Swift.Int)
  final public func clearAllTags()
  final public func deleteAllTags()
  final public func refreshTags()
  final public func displayPropertyOnMap()
  final public func displayFriendLocations(friends: [MapstedCore.MNShareLocationItem], bgColor: UIKit.UIColor = UIColor.systemPurple, margin: CoreGraphics.CGFloat = 8)
  final public func deleteFriendLocations(friends: [MapstedCore.MNShareLocationItem])
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension MapstedMapUiViewController : MapstedMap.MNMapListenerDelegate, MapstedMap.MNMapVectorTileEventListenerDelegate {
  final public func onMapIdle()
  final public func outsideBuildingTapped(tapPos: __ObjC.MNMercator, tapType: MapstedMap.MapstedMapApi.TapType)
  final public func onMapStable()
  final public func onMapMoved()
}
extension MapstedMapUiViewController : MapstedCore.MNPositionDelegate {
  final public func onPositionChangeWithAnimation(encrypted: __ObjC.MNPosition, begin: Swift.Bool)
  final public func onPositionChange(encrypted: __ObjC.MNPosition)
  final public func addNearbyProperties(propertyIds: Swift.Set<Swift.Int>)
  final public func removeNearbyProperties(propertyIds: Swift.Set<Swift.Int>)
  final public func setPositionVisibility(visible: Swift.Bool)
}
extension MapstedMapUiViewController : UIKit.UISearchBarDelegate {
  @objc final public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
  @objc final public func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
  @objc final public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @objc final public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
}
extension MapstedMapUiViewController : MapstedMap.MNMapVectorElementListenerDelegate {
  final public func onMarkerTapped(markerName: Swift.String, markerType: Swift.String)
  final public func onPolygonTapped(polygon: __ObjC.MNMapPolygon, tapType: MapstedMap.MapstedMapApi.TapType, tapPos: __ObjC.MNMercator)
  final public func onBalloonClicked(searchEntity: __ObjC.MNSearchEntity)
}
extension MapstedMapUiViewController {
  final public func hideSearchBar(hidden: Swift.Bool)
  final public func addTag(tagName: Swift.String, tagPos: __ObjC.MNPosition)
  final public func addTags(tags: [__ObjC.MNTag])
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CoreDataHelper : ObjectiveC.NSObject {
  public static let shared: MapstedMapUi.CoreDataHelper
  public func allTags(propertyId: Swift.Int) -> [__ObjC.MNTag]
  public func getTags(propertyId: Swift.Int) -> [MapstedMapUi.Tag]?
  public func searchTags(propertyId: Swift.Int, search text: Swift.String) -> [MapstedMapUi.Tag]?
  public func insertTag(name: Swift.String, propertyId: Swift.Int, buildingId: Swift.Int, floorId: Swift.Int, x: Swift.Double, y: Swift.Double)
  public func renameTag(tag: __ObjC.MNTag, newName: Swift.String)
  public func deleteTag(tag: __ObjC.MNTag, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func updateTag(tag: MapstedMapUi.Tag)
  @objc deinit
}
public enum Translations : Swift.String {
  case eSelectedLocation
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class PropertyListViewController : UIKit.UIViewController {
  public static func className() -> Swift.String
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  public static func instantiateViewController() -> UIKit.UIViewController?
  public func selectedPropertyInfo() -> __ObjC.MNPropertyInfo?
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension PropertyListViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension PropertyListViewController : UIKit.UITableViewDelegate {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
}
@_inheritsConvenienceInitializers @objc public class ShadowView : UIKit.UIView {
  public var radiusOfCorner: CoreGraphics.CGFloat
  public var shadowOpacity: Swift.Float
  @objc override dynamic public func layoutSubviews()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers public class ContainerViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  public func addController(controller: UIKit.UIViewController, yOffset: CoreGraphics.CGFloat, isNew: Swift.Bool, callback: (() -> Swift.Void)? = nil)
  public func removeController(controller: UIKit.UIViewController)
  public func clearAllControllers()
  public func addControllerAnimated(controller: UIKit.UIViewController, yOffset: CoreGraphics.CGFloat, isNew: Swift.Bool)
  public func activeController() -> UIKit.UIViewController?
  public func controllerOnStack(className: Swift.String) -> UIKit.UIViewController?
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum RoutingState : Swift.String {
  case None
  case AboutToMakeRouteRequest
  case RequestedNavigation
  case RequestedDirectionsToItinerary
  case ReceivedRoutingInstructions
  case RoutePreviewModeStarted
  case RoutePreviewModeEnded
  case RouteSimulationStarted
  case NavigationStarted
  case NavigationEnded
  case NotifiedNoError
  case NotifiedUnknownUserPosition
  case NotifiedOutsideProperty
  case NotifiedMiscellaneousError
  case ShownUIToChooseStartLocation
  case WillChooseStartLocation
  case DidSelectStartLocation
  case CancelledChoosingStartLocation
  case RemovedUIToChooseStartLocation
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(Tag) public class Tag : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Tag {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedMapUi.Tag>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mercatorX: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mercatorY: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Double {
    @objc get
    @objc set
  }
}
extension MapstedMapUi.MapState : Swift.Equatable {}
extension MapstedMapUi.MapState : Swift.Hashable {}
extension MapstedMapUi.MapState : Swift.RawRepresentable {}
extension MapstedMapUi.Translations : Swift.Equatable {}
extension MapstedMapUi.Translations : Swift.Hashable {}
extension MapstedMapUi.Translations : Swift.RawRepresentable {}
extension MapstedMapUi.RoutingState : Swift.Equatable {}
extension MapstedMapUi.RoutingState : Swift.Hashable {}
extension MapstedMapUi.RoutingState : Swift.RawRepresentable {}
